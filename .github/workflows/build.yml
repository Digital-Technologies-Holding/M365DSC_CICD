name: M365DSC Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Checkout Data repository
      - name: Checkout Data Repository
        uses: actions/checkout@v3
        with:
          path: ./s/Data

      # Checkout CICD repository
      - name: Checkout CICD Repository
        uses: actions/checkout@v3
        with:
          repository: Digital-Technologies-Holding/M365DSC_CICD  # Replace with actual owner/repo
          path: ./s/CICD
          token: ${{ secrets.DSC }}  # Use a secret or custom PAT as required

      # Configure WinRM with cmd
      - name: Configure WinRM
        run: |
          cmd.exe /c "
            @echo off
            call winrm invoke restore winrm/config
            call winrm quickconfig -quiet
            call winrm set winrm/config @{MaxEnvelopeSizekb='4096'} > null
            call winrm get winrm/config | find /i 'MaxEnvelopeSizekb'
          "

      # Install Required Modules (Prepare Agent)
      - name: Prepare Agent (Install Modules)
        shell: pwsh
        run: |
          ./s/CICD/Scripts/DeployModules.ps1 -PackageSourceLocation "${{ secrets.PACKAGE_SOURCE_LOCATION }}" -PATToken "${{ secrets.PAT_TOKEN }}"
        env:
          FAIL_ON_STDERR: true

      # Validate Secrets in Azure KeyVault
      - name: Validate Secrets
        uses: AzurePowerShell@5
        with:
          azureSubscription: ${{ secrets.AZURE_SUBSCRIPTION }}  # Your Azure subscription
          ScriptType: 'FilePath'
          ScriptPath: './s/CICD/Scripts/ValidateSecrets.ps1'
          ScriptArguments: '-KeyVault "${{ secrets.KEY_VAULT }}"'
          azurePowerShellVersion: 'latest'
          failOnStandardError: true
          errorActionPreference: 'Stop'

      # Run Pre-Build QA Tests (Merge and Test Data Files)
      - name: Pre Build (Merge and Test Data Files)
        shell: pwsh
        run: |
          ./s/CICD/Scripts/PreBuild.ps1

      # Compile MOF Files (Build Artifacts)
      - name: Compile Artifacts
        shell: pwsh
        run: |
          ./s/CICD/Scripts/Build.ps1

      # Post-Build Updates (Update Environments)
      - name: Post Build (Update Environments)
        shell: pwsh
        run: |
          ./s/CICD/Scripts/PostBuild.ps1
        env:
          SYSTEM_ACCESSTOKEN: ${{ secrets.SYSTEM_ACCESSTOKEN }}

      # Publish Build Artifacts
      - name: Publish Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: DeployPackage
          path: ${{ secrets.BUILD_FOLDER_NAME }}/
