name: M365DSC Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Checkout CICD repository
      - name: Checkout CICD Repository
        uses: actions/checkout@v3
        with:
          repository: Digital-Technologies-Holding/M365DSC_CICD
          path: ./s/CICD
          token: ${{ secrets.DSC }}

      # Debug: List files in Supportscripts directory to verify the script exists
      - name: List Files in CICD Supportscripts Directory
        run: |
          dir ./s/CICD/Supportscripts

      # Checkout Data repository that contains the Environments folder
      - name: Checkout Data Repository
        uses: actions/checkout@v3
        with:
          repository: Digital-Technologies-Holding/M365DSC_Data  # Replace with actual repo containing Environments
          path: ./s/Data
          token: ${{ secrets.DSC }}

      # Configure WinRM with cmd
      - name: Configure WinRM
        run: |
          cmd.exe /c "
            @echo off
            call winrm invoke restore winrm/config
            call winrm quickconfig -quiet
            call winrm set winrm/config @{MaxEnvelopeSizekb='4096'} > null
            call winrm get winrm/config | find /i 'MaxEnvelopeSizekb'
          "

      # Install Required Modules (Prepare Agent)
      - name: Prepare Agent (Install Modules)
        shell: pwsh
        run: |
          ./s/CICD/Supportscripts/DeployModules.ps1 -PackageSourceLocation "${{ secrets.PACKAGE_SOURCE_LOCATION }}" -PATToken "${{ secrets.PAT_TOKEN }}"
        env:
          FAIL_ON_STDERR: true

      # Set up Azure authentication
      - name: Set up Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Set the subscription ID using environment variables
      - name: Set Subscription ID
        run: |
          echo "AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      # Run the PrepareKeyvault.ps1 script to ensure certificates are in place
      - name: Prepare KeyVault
        shell: pwsh
        run: |
          ./s/CICD/Supportscripts/PrepareKeyvault.ps1 -VaultName "${{ secrets.KEY_VAULT }}" -DataFileFolder "./s/Data/Environments"
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

      # Validate Secrets in Azure KeyVault
      - name: Validate Secrets
        uses: azure/powershell@v1
        with:
          inlineScript: |
            .\s\CICD\Supportscripts\ValidateSecrets.ps1 -KeyVault "${{ secrets.KEY_VAULT }}"
          azPSVersion: 'latest'
          failOnStandardError: true
          errorActionPreference: 'Stop'

      # Run Pre-Build QA Tests (Merge and Test Data Files)
      - name: Pre Build (Merge and Test Data Files)
        shell: pwsh
        run: |
          ./s/CICD/Supportscripts/PreBuild.ps1

      # Compile MOF Files (Build Artifacts)
      - name: Compile Artifacts
        shell: pwsh
        run: |
          ./s/CICD/Supportscripts/Build.ps1

      # Post-Build Updates (Update Environments)
      - name: Post Build (Update Environments)
        shell: pwsh
        run: |
          ./s/CICD/Supportscripts/PostBuild.ps1
        env:
          SYSTEM_ACCESSTOKEN: ${{ secrets.SYSTEM_ACCESSTOKEN }}

      # Publish Build Artifacts
      - name: Publish Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: DeployPackage
          path: ${{ secrets.BUILD_FOLDER_NAME }}/
